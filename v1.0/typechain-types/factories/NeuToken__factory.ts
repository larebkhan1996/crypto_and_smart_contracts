/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { NeuToken, NeuTokenInterface } from "../NeuToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061138860008190555060b6806100286000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c4e41b2214602d575b600080fd5b60336047565b604051603e91906067565b60405180910390f35b60008054905090565b6000819050919050565b6061816050565b82525050565b6000602082019050607a6000830184605a565b9291505056fea2646970667358221220a93e9a37e851afa81c42adc325c244cfd76f9effd286f1dd4e43953aa2010adc64736f6c63430008110033";

type NeuTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NeuTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NeuToken__factory extends ContractFactory {
  constructor(...args: NeuTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NeuToken> {
    return super.deploy(overrides || {}) as Promise<NeuToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NeuToken {
    return super.attach(address) as NeuToken;
  }
  override connect(signer: Signer): NeuToken__factory {
    return super.connect(signer) as NeuToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NeuTokenInterface {
    return new utils.Interface(_abi) as NeuTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NeuToken {
    return new Contract(address, _abi, signerOrProvider) as NeuToken;
  }
}
